{
	"samples": [
		{
			"name": "Animate a page route transition",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/page-route-animation.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/animation/page-route-animation.html",
			"web": null,
			"description": "A design language, such as Material, defines standard behaviors when\ntransitioning between routes (or screens). Sometimes, though, a custom\ntransition between screens can make an app more unique. To help,\nPageRouteBuilder provides an Animation object.\nThis Animation can be used with Tween and\nCurve objects to customize the transition animation.\nThis recipe shows how to transition between\nroutes by animating the new route into view from\nthe bottom of the screen.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"animation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Animate a widget using a physics simulation",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/physics-simulation.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/animation/physics-simulation.html",
			"web": null,
			"description": "Physics simulations can make app interactions feel realistic and interactive.\nFor example, you might want to animate a widget to act as if it were attached to\na spring or falling with gravity.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"animation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Animate the properties of a container",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/animated-container.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/animation/animated-container.html",
			"web": null,
			"description": "The Container class provides a convenient way\nto create a widget with specific properties:\nwidth, height, background color, padding, borders, and more.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"animation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Fade a widget in and out",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/opacity-animation.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/animation/opacity-animation.html",
			"web": null,
			"description": "UI developers often need to show and hide elements on screen.\nHowever, quickly popping elements on and off the screen can\nfeel jarring to end users. Instead,\nfade elements in and out with an opacity animation to create\na smooth experience.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"animation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Add a Drawer to a screen",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/drawer.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/drawer.html",
			"web": null,
			"description": "In apps that use Material Design,\nthere are two primary options for navigation: tabs and drawers.\nWhen there is insufficient space to support tabs,\ndrawers provide a handy alternative.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Display a snackbar",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/snackbars.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/snackbars.html",
			"web": null,
			"description": "It can be useful to briefly inform your users when certain actions\ntake place. For example, when a user swipes away a message in a list,\nyou might want to inform them that the message has been deleted.\nYou might even want to give them an option to undo the action.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Export fonts from a package",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/package-fonts.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/package-fonts.html",
			"web": null,
			"description": "Rather than declaring a font as part of an app,\nyou can declare a font as part of a separate package.\nThis is a convenient way to share the same font across\nseveral different projects,\nor for coders publishing their packages to pub.dev.\nThis recipe uses the following steps:",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Update the UI based on orientation",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/orientation.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/orientation.html",
			"web": null,
			"description": "In some situations,\nyou want to update the display of an app when the user\nrotates the screen from portrait mode to landscape mode. For example,\nthe app might show one item after the next in portrait mode,\nyet put those same items side-by-side in landscape mode.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Use a custom font",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/fonts.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/fonts.html",
			"web": null,
			"description": "Although Android and iOS offer high quality system fonts,\none of the most common requests from designers is for custom fonts.\nFor example, you might have a custom-built font from a designer,\nor perhaps you downloaded a font from Google Fonts.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Use themes to share colors and font styles",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/themes.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/themes.html",
			"web": null,
			"description": "To share colors and font styles throughout an app, use themes.\nYou can either define app-wide themes, or use Theme widgets\nthat define the colors and font styles for a particular part\nof the application. In fact,\napp-wide themes are just Theme widgets created at\nthe root of an app by the MaterialApp.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Work with tabs",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/tabs.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/design/tabs.html",
			"web": null,
			"description": "Working with tabs is a common pattern in apps that follow the\nMaterial Design guidelines.\nFlutter includes a convenient way to create tab layouts as part of\nthe material library.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"design"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Build a form with validation",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/validation.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/forms/validation.html",
			"web": null,
			"description": "Apps often require users to enter information into a text field.\nFor example, you might require users to log in with an email address\nand password combination.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"forms"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Create and style a text field",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/text-input.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/forms/text-input.html",
			"web": null,
			"description": "Text fields allow users to type text into an app.\nThey are used to build forms,\nsend messages, create search experiences, and more.\nIn this recipe, explore how to create and style text fields.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"forms"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Focus and text fields",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/focus.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/forms/focus.html",
			"web": null,
			"description": "When a text field is selected and accepting input,\nit is said to have “focus.”\nGenerally, users shift focus to a text field by tapping,\nand developers shift focus to a text field programmatically by\nusing the tools described in this recipe.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"forms"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Handle changes to a text field",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/text-field-changes.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/forms/text-field-changes.html",
			"web": null,
			"description": "In some cases, it’s useful to run a callback function every time the text\nin a text field changes. For example, you might want to build a search\nscreen with autocomplete functionality where you want to update the\nresults as the user types.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"forms"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Retrieve the value of a text field",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/retrieve-input.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/forms/retrieve-input.html",
			"web": null,
			"description": "In this recipe,\nlearn how to retrieve the text a user has entered into a text field\nusing the following steps:",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"forms"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Add Material touch ripples",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/ripples.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/gestures/ripples.html",
			"web": null,
			"description": "Widgets that follow the Material Design guidelines display\na ripple animation when tapped.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"gestures"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Handle taps",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/handling-taps.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/gestures/handling-taps.html",
			"web": null,
			"description": "You not only want to display information to users,\nyou want users to interact with your app.\nUse the GestureDetector widget to respond\nto fundamental actions, such as tapping and dragging.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"gestures"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Implement swipe to dismiss",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/dismissible.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/gestures/dismissible.html",
			"web": null,
			"description": "The “swipe to dismiss” pattern is common in many mobile apps.\nFor example, when writing an email app,\nyou might want to allow a user to swipe away\nemail messages to delete them from a list.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"gestures"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Display images from the internet",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/network-image.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/images/network-image.html",
			"web": null,
			"description": "Displaying images is fundamental for most mobile apps.\nFlutter provides the Image widget to\ndisplay different types of images.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"images"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Fade in images with a placeholder",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/fading-in-images.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/images/fading-in-images.html",
			"web": null,
			"description": "When displaying images using the default Image widget,\nyou might notice they simply pop onto the screen as they’re loaded.\nThis might feel visually jarring to your users.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"images"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Work with cached images",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/cached-images.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/images/cached-images.html",
			"web": null,
			"description": "In some cases, it’s handy to cache images as they’re downloaded from the\nweb, so they can be used offline. For this purpose,\nuse the cached_network_image package.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"images"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Create a grid list",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/grid-lists.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/grid-lists.html",
			"web": null,
			"description": "In some cases, you might want to display your items as a grid rather than\na normal list of items that come one after the next.\nFor this task, use the GridView widget.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Create a horizontal list",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/horizontal-list.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/horizontal-list.html",
			"web": null,
			"description": "You might want to create a list that scrolls\nhorizontally rather than vertically.\nThe ListView widget supports horizontal lists.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Create lists with different types of items",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/mixed-list.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/mixed-list.html",
			"web": null,
			"description": "You might need to create lists that display different types of content.\nFor example, you might be working on a list that shows a heading\nfollowed by a few items related to the heading, followed by another heading,\nand so on.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Place a floating app bar above a list",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/floating-app-bar.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/floating-app-bar.html",
			"web": null,
			"description": "To make it easier for users to view a list of items,\nyou might want to hide the app bar as the user scrolls down the list.\nThis is especially true if your app displays a “tall”\napp bar that occupies a lot of vertical space.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Use lists",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/basic-list.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/basic-list.html",
			"web": null,
			"description": "Displaying lists of data is a fundamental pattern for mobile apps.\nFlutter includes the ListView\nwidget to make working with lists a breeze.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Work with long lists",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/long-lists.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/lists/long-lists.html",
			"web": null,
			"description": "The standard ListView constructor works well\nfor small lists. To work with lists that contain\na large number of items, it’s best to use the\nListView.builder constructor.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"lists"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Report errors to a service",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/error-reporting.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/maintenance/error-reporting.html",
			"web": null,
			"description": "While one always tries to create apps that are free of bugs,\nthey’re sure to crop up from time to time.\nSince buggy apps lead to unhappy users and customers,\nit’s important to understand how often your users\nexperience bugs and where those bugs occur.\nThat way, you can prioritize the bugs with the\nhighest impact and work to fix them.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"maintenance"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Animate a widget across screens",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/hero-animations.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/hero-animations.html",
			"web": null,
			"description": "It’s often helpful to guide users through an app as they navigate from screen\nto screen. A common technique to lead users through an app is to animate a\nwidget from one screen to the next. This creates a visual anchor connecting\nthe two screens.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Navigate to a new screen and back",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/navigation-basics.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/navigation-basics.html",
			"web": null,
			"description": "Most apps contain several screens for displaying different types of\ninformation.\nFor example, an app might have a screen that displays products.\nWhen the user taps the image of a product, a new screen displays\ndetails about the product.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Navigate with named routes",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/named-routes.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/named-routes.html",
			"web": null,
			"description": "In the Navigate to a new screen and back recipe,\nyou learned how to navigate to a new screen by creating a new route and\npushing it to the Navigator.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Pass arguments to a named route",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/navigate-with-arguments.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/navigate-with-arguments.html",
			"web": null,
			"description": "The Navigator provides the ability to navigate\nto a named route from any part of an app using\na common identifier.\nIn some cases, you might also need to pass arguments to a\nnamed route. For example, you might wish to navigate to the /user route and\npass information about the user to that route.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Return data from a screen",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/returning-data.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/returning-data.html",
			"web": null,
			"description": "In some cases, you might want to return data from a new screen.\nFor example, say you push a new screen that presents two options to a user.\nWhen the user taps an option, you want to inform the first screen\nof the user’s selection so that it can act on that information.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Send data to a new screen",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/passing-data.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/navigation/passing-data.html",
			"web": null,
			"description": "Often, you not only want to navigate to a new screen,\nbut also pass data to the screen as well.\nFor example, you might want to pass information about\nthe item that’s been tapped.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"navigation"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Fetch data from the internet",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/fetch-data.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/networking/fetch-data.html",
			"web": null,
			"description": "Fetching data from the internet is necessary for most apps.\nLuckily, Dart and Flutter provide tools, such as the\nhttp package, for this type of work.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"networking"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Make authenticated requests",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/authenticated-requests.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/networking/authenticated-requests.html",
			"web": null,
			"description": "To fetch data from many web services, you need to provide\nauthorization. There are many ways to do this, but perhaps the most common\nuses the Authorization HTTP header.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"networking"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Parse JSON in the background",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/background-parsing.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/networking/background-parsing.html",
			"web": null,
			"description": "By default, Dart apps do all of their work on a single thread.\nIn many cases, this model simplifies coding and is fast enough\nthat it does not result in poor app performance or stuttering animations,\noften called “jank.”",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"networking"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Send data to the internet",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/send-data.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/networking/send-data.html",
			"web": null,
			"description": "Sending data to the internet is necessary for most apps.\nThe http package has got it covered too.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"networking"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Work with WebSockets",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/web-sockets.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/networking/web-sockets.html",
			"web": null,
			"description": "In addition to normal HTTP requests,\nyou can connect to servers using WebSockets.\nWebSockets allow for two-way communication with a server\nwithout polling.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"networking"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Persist data with SQLite",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/sqlite.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/persistence/sqlite.html",
			"web": null,
			"description": "If writing an app that needs to persist and query larger amounts of data on\nthe local device, consider using a database instead of a local file or\nkey-value store. In general, databases provide faster inserts, updates,\nand queries, compared to other local persistence solutions.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"persistence"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Read and write files",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/reading-writing-files.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/persistence/reading-writing-files.html",
			"web": null,
			"description": "In some cases, you need to read and write files to disk.\nFor example, you may need to persist data across app launches,\nor download data from the internet and save it for later offline use.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"persistence"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Store key-value data on disk",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/key-value.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/persistence/key-value.html",
			"web": null,
			"description": "If you have a relatively small collection of key-values\nto save, you can use the shared_preferences plugin.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"persistence"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Play and pause a video",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/play-video.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/plugins/play-video.html",
			"web": null,
			"description": "Playing videos is a common task in app development,\nand Flutter apps are no exception. To play videos,\nthe Flutter team provides the video_player plugin.\nYou can use the video_player plugin to play videos\nstored on the file system, as an asset, or from the internet.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"plugins"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Take a picture using the camera",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/picture-using-camera.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/plugins/picture-using-camera.html",
			"web": null,
			"description": "Many apps require working with the device’s cameras to\ntake photos and videos.  Flutter provides the camera plugin\nfor this purpose. The camera plugin provides tools to get a list of the\navailable cameras, display a preview coming from a specific camera,\nand take photos or videos.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"plugins"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "An introduction to integration testing",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/introduction.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/integration/introduction.html",
			"web": null,
			"description": "Unit tests and widget tests are handy for testing individual classes,\nfunctions, or widgets. However, they generally don’t test how\nindividual pieces work together as a whole or capture the performance\nof an application running on a real device. These tasks are performed\nwith integration tests.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"integration"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Handle scrolling",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/scrolling.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/integration/scrolling.html",
			"web": null,
			"description": "Many apps feature lists of content,\nfrom email clients to music apps and beyond.\nTo verify that lists contain the expected content\nusing integration tests,\nyou need a way to scroll through lists to search for particular items.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"integration"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Performance profiling",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/profiling.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/integration/profiling.html",
			"web": null,
			"description": "When it comes to mobile apps, performance is critical to user experience.\nUsers expect apps to have smooth scrolling and meaningful animations free of\nstuttering or skipped frames, known as “jank.” How to ensure that your app\nis free of jank on a wide variety of devices?",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"integration"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "An introduction to unit testing",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/introduction.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/unit/introduction.html",
			"web": null,
			"description": "How can you ensure that your app continues to work as you add more features or\nchange existing functionality? By writing tests.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"unit"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Mock dependencies using Mockito",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/mocking.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/unit/mocking.html",
			"web": null,
			"description": "Sometimes, unit tests might depend on classes that fetch data from live\nweb services or databases. This is inconvenient for a few reasons:",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"unit"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "An introduction to widget testing",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/introduction.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/widget/introduction.html",
			"web": null,
			"description": "In the introduction to unit testing recipe,\nyou learned how to test Dart classes using the test package.\nTo test widget classes, you need a few additional tools provided by the\nflutter_test package, which ships with the Flutter SDK.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"widget"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Find widgets",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/finders.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/widget/finders.html",
			"web": null,
			"description": "To locate widgets in a test environment, use the Finder\nclasses. While it’s possible to write your own Finder classes,\nit’s generally more convenient to locate widgets using the tools\nprovided by the flutter_test package.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"widget"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		},
		{
			"name": "Tap, drag, and enter text",
			"author": "Flutter",
			"screenshots": [
				{
					"url": "images/cookbook/tap-drag.png",
					"alt": "Cookbook article"
				}
			],
			"source": "https://flutter.dev/docs/cookbook/testing/widget/tap-drag.html",
			"web": null,
			"description": "Many widgets not only display information, but also respond\nto user interaction. This includes buttons that can be tapped,\nand TextField for entering text.",
			"difficulty": null,
			"widgets": [],
			"packages": [],
			"tags": [
				"cookbook",
				"widget"
			],
			"platforms": [],
			"links": [],
			"type": "cookbook",
			"date": null,
			"channel": null
		}
	]
}